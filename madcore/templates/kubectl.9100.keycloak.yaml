apiVersion: v1
kind: Namespace
metadata:
  name: keycloak
---
# Source: keycloak/templates/db-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: keycloak
  name: keycloak-db
  labels:
    app: keycloak
type: Opaque
data:
  password: "{{ component.postgresPasswordOpaque }}"
---
# Source: keycloak/templates/keycloak-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: keycloak
  name: keycloak-http
  labels:
    app: keycloak
type: Opaque
data:
  password: "{{ component.uiPasswordOpaque }}"

---
# Source: keycloak/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: keycloak
  name: keycloak
  labels:
    app: keycloak
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -eu

    /opt/jboss/keycloak/bin/jboss-cli.sh --file=/scripts/keycloak.cli

    exec /opt/jboss/docker-entrypoint.sh -b 0.0.0.0
    exit "$?"

  keycloak.cli: |
    embed-server --std-out=echo

    # Makes node identifier unique getting rid of a warning in the logs
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})


    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})

    # Log only to console
    /subsystem=logging/root-logger=ROOT:write-attribute(name=handlers, value=[CONSOLE])


    /socket-binding-group=standard-sockets/socket-binding=proxy-https:add(port=443)
    /subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=redirect-socket, value=proxy-https)
    /subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=proxy-address-forwarding, value=true)


    stop-embedded-server

---
# Source: keycloak/templates/test/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: keycloak
  name: keycloak-test
  labels:
    app: keycloak
data:
  test.py: |
    import os
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions
    from urllib.parse import urlparse

    print('Creating PhantomJS driver...')
    driver = webdriver.PhantomJS()

    base_url = 'http://keycloak-http'

    print('Opening Keycloak...')
    driver.get('{0}/auth/admin/'.format(base_url))

    username = os.environ['KEYCLOAK_USER']
    password = os.environ['KEYCLOAK_PASSWORD']

    username_input = WebDriverWait(driver, 30).until(expected_conditions.presence_of_element_located((By.ID, "username")))
    password_input = WebDriverWait(driver, 30).until(expected_conditions.presence_of_element_located((By.ID, "password")))
    login_button = WebDriverWait(driver, 30).until(expected_conditions.presence_of_element_located((By.ID, "kc-login")))

    print('Entering username...')
    username_input.send_keys(username)

    print('Entering password...')
    password_input.send_keys(password)

    print('Clicking login button...')
    login_button.click()

    current_url = urlparse(driver.current_url)
    expected_url = urlparse('{0}/auth/admin/master/console/'.format(base_url))

    print('Current URL: {0}'.format(current_url))
    print('Expected URL: {0}'.format(expected_url))

    if current_url.path != expected_url.path:
        print('Login failed. Current url is not expected url')
        exit(1)

    print('URLs match. Login successful.')

    driver.quit()

---
# Source: keycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: keycloak
  name: keycloak-headless
  labels:
    app: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app: keycloak

---
# Source: keycloak/templates/http-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: keycloak
  name: keycloak-http
  labels:
    app: keycloak
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app: keycloak

---
# Source: keycloak/templates/test/test-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  namespace: keycloak
  name: keycloak-test
  labels:
    app: keycloak
    role: test
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: keycloak-test
      image: "unguiculus/docker-python3-phantomjs-selenium:v1"
      imagePullPolicy: IfNotPresent
      command:
        - python3
        - /tests/test.py
      env:
        - name: KEYCLOAK_USER
          value: "{{ component.uiUsername }}"
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-http
              key: password
      volumeMounts:
        - name: tests
          mountPath: /tests
  volumes:
    - name: tests
      configMap:
        name: keycloak-test
  restartPolicy: Never

---
# Source: keycloak/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  namespace: keycloak
  name: keycloak
  annotations:
    checksum/config: 3844efe0f024c5e55a9b4cd71d18ef0847e975f459df4968dff594a7923b5ad4
  labels:
    app: keycloak
spec:
  replicas: 1
  serviceName: keycloak-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      namespace: keycloak
      labels:
        app: keycloak
    spec:
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000

      containers:
        - name: keycloak
          image: "jboss/keycloak:4.1.0.Final"
          imagePullPolicy: IfNotPresent
          command:
            - /scripts/keycloak.sh
          env:

            - name: DB_VENDOR
              value: "h2"
            # - name: KEYCLOAK_LOGLEVEL
            #   value: DEBUG
            # - name: WILDFLY_LOGLEVEL
            #   value: DEBUG
            # - name: CACHE_OWNERS
            #   value: "2"

          volumeMounts:
            - name: scripts
              mountPath: /scripts
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /auth/
              port: http
            initialDelaySeconds: 120
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /auth/
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
          resources:
            {}

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app:  keycloak
                matchExpressions:
                  - key: role
                    operator: NotIn
                    values:
                      - test
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app:  keycloak
                  matchExpressions:
                    - key: role
                      operator: NotIn
                      values:
                        - test
                topologyKey: failure-domain.beta.kubernetes.io/zone

      terminationGracePeriodSeconds: 60
      volumes:
        - name: scripts
          configMap:
            name: keycloak
            defaultMode: 0555
